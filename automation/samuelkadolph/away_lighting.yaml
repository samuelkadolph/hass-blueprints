blueprint:
  name: Away Lighting
  description: Turns lights on and off after a delay at specified times when no one is home.
  domain: automation
  author: Samuel Kadolph
  source_url: https://github.com/samuelkadolph/hass-blueprints/blob/main/automation/samuelkadolph/away_lighting.yaml
  input:
    on_trigger:
      name: On Trigger
      description: What do you want to trigger turning the lights on?
      default: elevation
      selector: &trigger-selector
        select:
          mode: dropdown
          options:
          - label: "Sun Elevation"
            value: "elevation"
          - label: "Time"
            value: "time"
          - label: "None"
            value: "none"
    on_elevation_helper:
      name: On Sun Elevation Helper
      description: Use a helper or leave empty to specify the elevation below.
      default:
      selector: &elevation-helper-selector
        entity:
          filter:
          - domain: input_number
    on_elevation_manual:
      name: On Sun Elevation
      description: What elevation of the sun should turn on the lights?
      default: 0.0
      selector: &elevation-manual-selector
        number:
          max: 5.0
          min: -18.0
          mode: slider
          step: 0.5
          unit_of_measurement: Â°
    on_time_helper:
      name: On Time Helper
      description: Use a helper or leave empty to specify the time below.
      default:
      selector: &time-helper-selector
        entity:
          filter:
          - domain: input_datetime
          - domain: sensor
            device_class: timestamp
    on_time_manual:
      name: On Time
      description: What time of day should turn on the lights?
      default:
      selector: &time-manual-selector
        time:
    on_delay_max:
      name: On Delay Max
      description: How long to delay turning on the lights? Upper bound to the random delay.
      default: { minutes: 30 }
      selector: &delay-selector
        duration:
    on_delay_min:
      name: On Delay Min
      description: How long to delay turning on the lights? Lower bound to the random delay.
      default: { minutes: 5 }
      selector: &delay-selector
        duration:
    on_conditions:
      name: On Conditions
      description: What other conditions should be checked before turning on the lights?
      default: []
      selector: &conditions-selector
        condition:
    off_trigger:
      name: Off Trigger
      description: What do you want to trigger turning off the lights?
      default: time
      selector: *trigger-selector
    off_elevation_helper:
      name: Off Sun Elevation Helper
      description: Use a helper or leave empty to specify the elevation below.
      default:
      selector: *elevation-helper-selector
    off_elevation_manual:
      name: Off Sun Elevation
      description: What elevation of the sun should turn off the lights?
      default: 0.0
      selector: *elevation-manual-selector
    off_time_helper:
      name: Off Time Helper
      description: Use a helper or leave empty to specify the time below.
      default:
      selector: *time-helper-selector
    off_time_manual:
      name: Off Time
      description: What time of day should the lights turn off?
      default:
      selector: *time-manual-selector
    off_delay_max:
      name: Off Delay Max
      description: How long to delay turning off the lights? Upper bound to the random delay.
      default: { minutes: 30 }
      selector: *delay-selector
    off_delay_min:
      name: Off Delay Min
      description: How long to delay turning off the lights? Lower bound to the random delay.
      default: { minutes: 5 }
      selector: *delay-selector
    off_conditions:
      name: Off Conditions
      description: What other conditions should be checked before turning off the lights?
      default: []
      selector: *conditions-selector
    lights:
      name: Lights
      description: Which lights to turn on and off?
      selector:
        entity:
          domain: light
          multiple: true
    zone:
      name: Zone
      description: Which zone must be empty to enable away lighting?
      default: zone.home
      selector:
        entity:
          domain: zone

mode: single
max_exceeded: silent

trigger_variables:
  off_elevation_helper: !input off_elevation_helper
  off_elevation_manual: !input off_elevation_manual
  off_trigger: !input off_trigger
  on_elevation_helper: !input on_elevation_helper
  on_elevation_manual: !input on_elevation_manual
  on_trigger: !input on_trigger

triggers:
- trigger: template
  value_template: '{{ on_trigger == "elevation" and on_elevation_helper != None and state_attr("sun.sun", "elevation") < float(states(on_elevation_helper)) }}'
  id: on_elevation
- trigger: template
  value_template: '{{ on_trigger == "elevation" and on_elevation_helper == None and state_attr("sun.sun", "elevation") < on_elevation_manual }}'
  id: on_elevation
- trigger: time
  at: !input on_time_helper
  id: on_time_helper
- trigger: time
  at: !input on_time_manual
  id: on_time_manual

- trigger: template
  value_template: '{{ off_trigger == "elevation" and off_elevation_helper != None and state_attr("sun.sun", "elevation") > float(states(off_elevation_helper)) }}'
  id: off_elevation
- trigger: template
  value_template: '{{ off_trigger == "elevation" and off_elevation_helper == None and state_attr("sun.sun", "elevation") > off_elevation_manual }}'
  id: off_elevation
- trigger: time
  at: !input off_time_helper
  id: off_time_helper
- trigger: time
  at: !input off_time_manual
  id: off_time_manual

- trigger: state
  entity_id: !input zone
  from: '0'
  id: "person_arrived"

variables:
  off_delay_max: !input off_delay_max
  off_delay_min: !input off_delay_min
  off_delay_rand: '{{ range(off_delay_min.get("hours", 0) * 3600 + off_delay_min.get("minutes", 0) * 60 + off_delay_min.get("seconds", 0), off_delay_max.get("hours", 0) * 3600 + off_delay_max.get("minutes", 0) * 60 + off_delay_max.get("seconds", 0)) | random }}'
  off_time_helper: !input off_time_helper
  off_trigger: !input off_trigger
  on_delay_max: !input on_delay_max
  on_delay_min: !input on_delay_min
  on_delay_rand: '{{ range(on_delay_min.get("hours", 0) * 3600 + on_delay_min.get("minutes", 0) * 60 + on_delay_min.get("seconds", 0), on_delay_max.get("hours", 0) * 3600 + on_delay_max.get("minutes", 0) * 60 + on_delay_max.get("seconds", 0)) | random }}'
  on_time_helper: !input on_time_helper
  on_trigger: !input on_trigger

actions:
- choose:
  - conditions:
    - condition: or
      conditions:
      - '{{ trigger.id == "on_elevation" }}'
      - '{{ trigger.id == "on_time_helper" and on_trigger == "time" and on_time_helper != None }}'
      - '{{ trigger.id == "on_time_manual" and on_trigger == "time" and on_time_helper == None }}'
    - condition: state
      entity_id: !input zone
      state: '0'
    - condition: !input on_conditions
    sequence:
    - delay: { seconds: '{{ on_delay_rand }}' }
    - action: light.turn_on
      target: { entity_id: !input lights }

  - conditions:
    - condition: or
      conditions:
      - '{{ trigger.id == "off_elevation" }}'
      - '{{ trigger.id == "off_time_helper" and off_trigger == "time" and off_time_helper != None }}'
      - '{{ trigger.id == "off_time_manual" and off_trigger == "time" and off_time_helper == None }}'
    - condition: state
      entity_id: !input zone
      state: '0'
    - condition: !input off_conditions
    sequence:
    - delay: { seconds: '{{ off_delay_rand }}' }
    - action: light.turn_off
      target: { entity_id: !input lights }

  - conditions:
    - '{{ trigger.id == "person_arrived" }}'
    sequence: []
