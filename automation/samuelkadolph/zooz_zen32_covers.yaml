blueprint:
  name: Zooz ZEN32 Covers
  description: Control covers with a Zooz ZEN32 scene controller.
  domain: automation
  author: Samuel Kadolph
  source_url: https://github.com/samuelkadolph/hass-blueprints/blob/main/automation/samuelkadolph/zooz_zen32_covers.yaml
  input:
    controller:
      name: Controller
      description: Which scene controller to use?
      selector:
        device:
          filter:
          - { manufacturer: Zooz, model: ZEN32 }
    key:
      name: Key
      default: '005'
      description: Which button on the controller to use?
      selector:
        select:
          mode: dropdown
          options:
          - label: '1 (Top)'
            value: '005'
          - label: '2 (Mid Left)'
            value: '001'
          - label: '3 (Mid Right)'
            value: '002'
          - label: '4 (Bottom Left)'
            value: '003'
          - label: '5 (Bottom Right)'
            value: '004'
    led_enable:
      name: Enable LED
      description: Use the LED to show the state of the lights?
      default: true
      selector:
        boolean:
    led_invert:
      name: Invert LED
      description: Invert the LED state?
      default: false
      selector:
        boolean:
    state_variable:
      name: State Variable
      description: |
        This automation requires a Number helper to store the current state of the shade.
        Please create one that goes from 0 to 4 and select it here.
        Must only be shared with automations using the same set of shades.
      selector:
        entity:
          domain: input_number
    covers:
      name: Covers
      description: Which covers to control?
      selector:
        entity:
          domain: cover
          multiple: true

mode: single
max_exceeded: silent

triggers:
- trigger: state
  entity_id: !input covers
  attribute: current_position
  to: [0, 100]
  for: { seconds: 30 }
  id: reset
- trigger: state
  entity_id: !input covers
  to: open
  id: cover_opened
- trigger: state
  entity_id: !input covers
  to: closed
  id: cover_closed
- trigger: event
  event_type: zwave_js_value_notification
  event_data:
    <<: &event_data
      device_id: !input controller
      command_class_name: Central Scene
      property_key: !input key
    value: KeyPressed
  id: key_pressed
- trigger: event
  event_type: zwave_js_value_notification
  event_data:
    <<: *event_data
    value: KeyPressed2x
  id: key_pressed_twice
- trigger: event
  event_type: zwave_js_value_notification
  event_data:
    <<: *event_data
    value: KeyHeldDown
  id: key_held_down
- trigger: event
  event_type: zwave_js_value_notification
  event_data:
    <<: *event_data
    value: KeyReleased
  id: key_released

variables:
  controller: !input controller
  key: !input key
  led_enable: !input led_enable
  led_invert: !input led_invert
  led_entity: '{{ device_entities(controller) | select("search", "button_{}_indication_binary".format(int(key) % 5 + 1)) | first }}'
  state_variable: !input state_variable
  state: '{{ int(states(state_variable)) }}'
  # 0=nothing 1=up 2=up_stopped 3=down 4=down_stopped

actions:
- choose:
  - conditions:
    - '{{ trigger.id == "reset" }}'
    sequence:
    - action: input_number.set_value
      data: { value: 0 }
      target: { entity_id: !input state_variable }

  - conditions:
    - '{{ trigger.id == "cover_opened" }}'
    sequence: &led_on
    - if:
      - '{{ led_enable }}'
      then:
      - action: '{{ led_invert and "switch.turn_off" or "switch.turn_on" }}'
        target: { entity_id: '{{ led_entity }}' }

  - conditions:
    - '{{ trigger.id == "cover_closed" }}'
    sequence: &led_off
    - if:
      - '{{ led_enable }}'
      then:
      - action: '{{ led_invert and "switch.turn_on" or "switch.turn_off" }}'
        target: { entity_id: '{{ led_entity }}' }

  - conditions:
    - '{{ trigger.id == "key_pressed" or trigger.id == "key_pressed_twice" }}'
    - '{{ int(trigger.event.data.property_key) == int(key) }}'
    sequence:
    - choose:
      - conditions:
        - '{{ state == 0 }}'
        sequence: &open_or_close_covers
        - if:
          - condition: state
            entity_id: !input covers
            state: '{{ trigger.id == "key_pressed_twice" and "open" or "closed" }}'
          then: &open_covers
          - action: cover.open_cover
            target: { entity_id: !input covers }
          - action: input_number.set_value
            data: { value: 1 }
            target: { entity_id: !input state_variable }
          - <<: *led_on
          else: &close_covers
          - action: cover.close_cover
            target: { entity_id: !input covers }
          - action: input_number.set_value
            data: { value: 3 }
            target: { entity_id: !input state_variable }
          - <<: *led_off
      - conditions:
        - '{{ state == 1 }}'
        sequence: &stop_opening
        - action: cover.stop_cover
          target: { entity_id: !input covers }
        - action: input_number.set_value
          data: { value: 2 }
          target: { entity_id: !input state_variable }
      - conditions:
        - '{{ state == 2 }}'
        sequence: *close_covers
      - conditions:
        - '{{ state == 3 }}'
        sequence: &stop_closing
        - action: cover.stop_cover
          target: { entity_id: !input covers }
        - action: input_number.set_value
          data: { value: 4 }
          target: { entity_id: !input state_variable }
      - conditions:
        - '{{ state == 4 }}'
        sequence: *open_covers

  - conditions:
    - '{{ trigger.id == "key_held_down" }}'
    - '{{ int(trigger.event.data.property_key) == int(key) }}'
    sequence:
    - choose:
      - conditions:
        - '{{ state == 0 }}'
        sequence: *open_or_close_covers
      - conditions:
        - '{{ state in [1, 2] }}'
        sequence: *close_covers
      - conditions:
        - '{{ state in [3, 4] }}'
        sequence: *open_covers

  - conditions:
    - '{{ trigger.id == "key_released" }}'
    - '{{ int(trigger.event.data.property_key) == int(key) }}'
    sequence:
    - choose:
      - conditions:
        - '{{ state == 1 }}'
        sequence: *stop_opening
      - conditions:
        - '{{ state == 3 }}'
        sequence: *stop_closing
