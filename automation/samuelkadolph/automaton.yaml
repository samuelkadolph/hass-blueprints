blueprint:
  name: Automaton
  description: Generic automation to execute actions when triggered by sun elevation or time
  domain: automation
  author: Samuel Kadolph
  source_url: https://github.com/samuelkadolph/hass-blueprints/blob/main/automation/samuelkadolph/automaton.yaml
  input:
    first_trigger:
      name: First Trigger
      description: What should trigger the first set of actions?
      default: elevation_below
      selector: &trigger-selector
        select:
          mode: dropdown
          options:
          - label: "Sun Elevation Above"
            value: "elevation_above"
          - label: "Sun Elevation Below"
            value: "elevation_below"
          - label: "Time"
            value: "time"
          - label: "None"
            value: "none"
    first_elevation_helper:
      name: First Sun Elevation Helper
      description: Use a helper or leave empty to specify the elevation below.
      default:
      selector: &elevation-helper-selector
        entity:
          filter:
          - domain: input_number
    first_elevation_manual:
      name: First Sun Elevation
      description: What elevation of the Sun should trigger the first set of actions?
      default: 0.0
      selector: &elevation-manual-selector
        number:
          max: 5.0
          min: -18.0
          step: 0.5
          unit_of_measurement: Â°
          mode: slider
    first_time_helper:
      name: First Time Helper
      description: Use a helper or leave empty to specify the time below.
      default:
      selector: &time-helper-selector
        entity:
          filter:
          - domain: input_datetime
          - domain: sensor
            device_class: timestamp
    first_time_manual:
      name: First Time
      description: When should we trigger the first set of actions?
      default:
      selector: &time-manual-selector
        time:
    first_conditions:
      name: First Conditions
      description: What conditions should be checked before running the first set of actions?
      default: []
      selector: &conditions-selector
        condition:
    first_actions:
      name: First Actions
      description: What should we do when the first trigger occurs?
      default: []
      selector: &actions-selector
        action:
    second_trigger:
      name: Second Trigger
      description: What should trigger the second set of actions?
      default: time
      selector: *trigger-selector
    second_elevation_helper:
      name: Second Sun Elevation Helper
      description: Use a helper or leave empty to specify the elevation below.
      default:
      selector: *elevation-helper-selector
    second_elevation_manual:
      name: Second Sun Elevation
      description: What elevation of the Sun should trigger the second set of actions?
      default: 0.0
      selector: *elevation-manual-selector
    second_time_helper:
      name: Second Time Helper
      description: Use a helper or leave empty to specify the time below.
      default:
      selector: *time-helper-selector
    second_time_manual:
      name: Second Time
      description: When should we trigger the second set of actions?
      default:
      selector: *time-manual-selector
    second_conditions:
      name: Second Conditions
      description: What conditions should be checked before running the second set of actions?
      default: []
      selector: *conditions-selector
    second_actions:
      name: Second Actions
      description: What should we do when the second trigger occurs?
      default: []
      selector: *actions-selector
    third_trigger:
      name: Third Trigger
      description: What should trigger the third set of actions?
      default: none
      selector: *trigger-selector
    third_elevation_helper:
      name: Third Sun Elevation Helper
      description: Use a helper or leave empty to specify the elevation below.
      default:
      selector: *elevation-helper-selector
    third_elevation_manual:
      name: Third Sun Elevation
      description: What elevation of the Sun should trigger the third set of actions?
      default: 0.0
      selector: *elevation-manual-selector
    third_time_helper:
      name: Third Time Helper
      description: Use a helper or leave empty to specify the time below.
      default:
      selector: *time-helper-selector
    third_time_manual:
      name: Third Time
      description: When should we trigger the third set of actions?
      default:
      selector: *time-manual-selector
    third_conditions:
      name: Third Conditions
      description: What conditions should be checked before running the third set of actions?
      default: []
      selector: *conditions-selector
    third_actions:
      name: Third Actions
      description: What should we do when the third trigger occurs?
      default: []
      selector: *actions-selector

mode: single

trigger_variables:
  first_elevation_helper: !input first_elevation_helper
  first_elevation_manual: !input first_elevation_manual
  first_trigger: !input first_trigger
  second_elevation_helper: !input second_elevation_helper
  second_elevation_manual: !input second_elevation_manual
  second_trigger: !input second_trigger
  third_elevation_helper: !input third_elevation_helper
  third_elevation_manual: !input third_elevation_manual
  third_trigger: !input third_trigger

triggers:
- trigger: template
  value_template: '{{ first_trigger == "elevation_above" and first_elevation_helper != None and state_attr("sun.sun", "elevation") > (states(first_elevation_helper) | float) }}'
  id: first_elevation
- trigger: template
  value_template: '{{ first_trigger == "elevation_above" and first_elevation_helper == None and state_attr("sun.sun", "elevation") > first_elevation_manual }}'
  id: first_elevation
- trigger: template
  value_template: '{{ first_trigger == "elevation_below" and first_elevation_helper != None and state_attr("sun.sun", "elevation") < (states(first_elevation_helper) | float) }}'
  id: first_elevation
- trigger: template
  value_template: '{{ first_trigger == "elevation_below" and first_elevation_helper == None and state_attr("sun.sun", "elevation") < first_elevation_manual }}'
  id: first_elevation
- trigger: time
  at: !input first_time_helper
  id: first_time_helper
- trigger: time
  at: !input first_time_manual
  id: first_time_manual

- trigger: template
  value_template: '{{ second_trigger == "elevation_above" and second_elevation_helper != None and state_attr("sun.sun", "elevation") > (states(second_elevation_helper) | float) }}'
  id: second_elevation
- trigger: template
  value_template: '{{ second_trigger == "elevation_above" and second_elevation_helper == None and state_attr("sun.sun", "elevation") > second_elevation_manual }}'
  id: second_elevation
- trigger: template
  value_template: '{{ second_trigger == "elevation_below" and second_elevation_helper != None and state_attr("sun.sun", "elevation") < (states(second_elevation_helper) | float) }}'
  id: second_elevation
- trigger: template
  value_template: '{{ second_trigger == "elevation_below" and second_elevation_helper == None and state_attr("sun.sun", "elevation") < second_elevation_manual }}'
  id: second_elevation
- trigger: time
  at: !input second_time_helper
  id: second_time_helper
- trigger: time
  at: !input second_time_manual
  id: second_time_manual

- trigger: template
  value_template: '{{ third_trigger == "elevation_above" and third_elevation_helper != None and state_attr("sun.sun", "elevation") > states(third_elevation_helper) | float }}'
  id: third_elevation
- trigger: template
  value_template: '{{ third_trigger == "elevation_above" and third_elevation_helper == None and state_attr("sun.sun", "elevation") > third_elevation_manual }}'
  id: third_elevation
- trigger: template
  value_template: '{{ third_trigger == "elevation_below" and third_elevation_helper != None and state_attr("sun.sun", "elevation") < states(third_elevation_helper) | float }}'
  id: third_elevation
- trigger: template
  value_template: '{{ third_trigger == "elevation_below" and third_elevation_helper == None and state_attr("sun.sun", "elevation") < third_elevation_manual }}'
  id: third_elevation
- trigger: time
  at: !input third_time_helper
  id: third_time_helper
- trigger: time
  at: !input third_time_manual
  id: third_time_manual

variables:
  first_time_helper: !input first_time_helper
  first_trigger: !input first_trigger
  second_time_helper: !input second_time_helper
  second_trigger: !input second_trigger
  third_time_helper: !input third_time_helper
  third_trigger: !input third_trigger

actions:
- choose:
  - conditions:
    - condition: or
      conditions:
      - '{{ trigger.id == "first_elevation" }}'
      - '{{ trigger.id == "first_time_helper" and first_trigger == "time" and first_time_helper != None }}'
      - '{{ trigger.id == "first_time_manual" and first_trigger == "time" and first_time_helper == None }}'
    - condition: !input first_conditions
    sequence: !input first_actions

  - conditions:
    - condition: or
      conditions:
      - '{{ trigger.id == "second_elevation" }}'
      - '{{ trigger.id == "second_time_helper" and second_trigger == "time" and second_time_helper != None }}'
      - '{{ trigger.id == "second_time_manual" and second_trigger == "time" and second_time_helper == None }}'
    - condition: !input second_conditions
    sequence: !input second_actions

  - conditions:
    - condition: or
      conditions:
      - '{{ trigger.id == "third_elevation" }}'
      - '{{ trigger.id == "third_time_helper" and third_trigger == "time" and third_time_helper != None }}'
      - '{{ trigger.id == "third_time_manual" and third_trigger == "time" and third_time_helper == None }}'
    - condition: !input third_conditions
    sequence: !input third_actions
