blueprint:
  name: Zooz ZEN76/77 Covers
  description: Binds paddle presses on a Zooz ZEN67/77 to control covers
  domain: automation
  author: Samuel Kadolph
  source_url: https://github.com/samuelkadolph/hass-blueprints/blob/main/automation/samuelkadolph/zooz_zen7677_covers.yaml
  input:
    switch:
      name: Switch
      description: Which switch to use
      selector:
        device:
          filter:
          - { manufacturer: Zooz, model: ZEN76 800LR }
          - { manufacturer: Zooz, model: ZEN77 800LR }
    paddle_taps:
      name: Paddle Taps
      description: How many taps on a paddle to require
      default: 'KeyPressed'
      selector:
        select:
          mode: dropdown
          options:
          - label: 'Single'
            value: 'KeyPressed'
          - label: 'Double'
            value: 'KeyPressed2x'
          - label: 'Triple'
            value: 'KeyPressed3x'
          - label: 'Quadruple'
            value: 'KeyPressed4x'
          - label: 'Quintuple'
            value: 'KeyPressed5x'
    paddle_hold:
      name: Paddle Hold
      description: Enable opening and closing when holding down a paddle
      default: true
      selector:
        boolean:
    state_variable:
      name: State Variable
      description: |
        This automation requires a Number helper to store the current state of the shade.
        Please create one that goes from 0 to 4 and select it here.
        Must only be shared with automations using the same set of shades.
      selector:
        entity:
          domain: input_number
    covers:
      name: Covers
      description: Which covers to control with the switch paddles
      selector:
        entity:
          domain: cover
          multiple: true

mode: single

trigger_variables:
  paddle_taps: !input paddle_taps

trigger:
- platform: state
  attribute: current_position
  entity_id: !input covers
  to: [0, 100]
  for: { seconds: 30 }
  id: reset
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input switch
    command_class_name: Central Scene
    property_key: '001'
    value: '{{ paddle_taps }}'
  id: upPressed
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input switch
    command_class_name: Central Scene
    property_key: '001'
    value: 'KeyHeldDown'
  id: upHeldDown
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input switch
    command_class_name: Central Scene
    property_key: '001'
    value: 'KeyReleased'
  id: upReleased
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input switch
    command_class_name: Central Scene
    property_key: '002'
    value: '{{ paddle_taps }}'
  id: downPressed
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input switch
    command_class_name: Central Scene
    property_key: '002'
    value: 'KeyHeldDown'
  id: downHeldDown
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input switch
    command_class_name: Central Scene
    property_key: '002'
    value: 'KeyReleased'
  id: downReleased

variables:
  paddle_hold: !input paddle_hold
  state_variable: !input state_variable
  state: '{{ int(states(state_variable)) }}'

action:
- choose:
  - conditions:
    - '{{ trigger.id == "reset" }}'
    sequence:
    - service: input_number.set_value
      data: { value: 0 }
      target: { entity_id: !input state_variable }

  - conditions:
    - '{{ trigger.id == "upPressed" }}'
    sequence:
    - choose:
      - conditions:
        - '{{ state in [0, 2, 4] }}'
        sequence:
        - service: cover.open_cover
          target: { entity_id: !input covers }
        - service: input_number.set_value
          data: { value: 1 }
          target: { entity_id: !input state_variable }
      - conditions:
        - '{{ state == 3 }}'
        sequence:
        - service: cover.stop_cover
          target: { entity_id: !input covers }
        - service: input_number.set_value
          data: { value: 4 }
          target: { entity_id: !input state_variable }

  - conditions:
    - '{{ trigger.id == "upHeldDown" }}'
    - '{{ paddle_hold }}'
    - '{{ state in [0, 2, 3, 4] }}'
    sequence:
    - service: cover.open_cover
      target: { entity_id: !input covers }
    - service: input_number.set_value
      data: { value: 1 }
      target: { entity_id: !input state_variable }

  - conditions:
    - '{{ trigger.id == "upReleased" }}'
    - '{{ paddle_hold }}'
    - '{{ state == 1 }}'
    sequence:
    - service: cover.stop_cover
      target: { entity_id: !input covers }
    - service: input_number.set_value
      data: { value: 2 }
      target: { entity_id: !input state_variable }

  - conditions:
    - '{{ trigger.id == "downPressed" }}'
    sequence:
    - choose:
      - conditions:
        - '{{ state in [0, 2, 4] }}'
        sequence:
        - service: cover.close_cover
          target: { entity_id: !input covers }
        - service: input_number.set_value
          data: { value: 3 }
          target: { entity_id: !input state_variable }
      - conditions:
        - '{{ state == 1 }}'
        sequence:
        - service: cover.stop_cover
          target: { entity_id: !input covers }
        - service: input_number.set_value
          data: { value: 2 }
          target: { entity_id: !input state_variable }

  - conditions:
    - '{{ trigger.id == "downHeldDown" }}'
    - '{{ paddle_hold }}'
    - '{{ state in [0, 1, 2, 4] }}'
    sequence:
    - service: cover.close_cover
      target: { entity_id: !input covers }
    - service: input_number.set_value
      data: { value: 3 }
      target: { entity_id: !input state_variable }

  - conditions:
    - '{{ trigger.id == "downReleased" }}'
    - '{{ paddle_hold }}'
    - '{{ state == 3 }}'
    sequence:
    - service: cover.stop_cover
      target: { entity_id: !input covers }
    - service: input_number.set_value
      data: { value: 4 }
      target: { entity_id: !input state_variable }
