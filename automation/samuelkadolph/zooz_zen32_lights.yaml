blueprint:
  name: Zooz ZEN32 Lights
  description: Control lights (or fans/switches) with a Zooz ZEN32 scene controller.
  domain: automation
  author: Samuel Kadolph
  source_url: https://github.com/samuelkadolph/hass-blueprints/blob/main/automation/samuelkadolph/zooz_zen32_lights.yaml
  input:
    controller:
      name: Controller
      description: Which scene controller to use?
      selector:
        device:
          filter:
          - { manufacturer: Zooz, model: ZEN32 }
    key:
      name: Key
      default: '005'
      description: Which button on the controller to use?
      selector:
        select:
          mode: dropdown
          options:
          - label: '1 (Top)'
            value: '005'
          - label: '2 (Mid Left)'
            value: '001'
          - label: '3 (Mid Right)'
            value: '002'
          - label: '4 (Bottom Left)'
            value: '003'
          - label: '5 (Bottom Right)'
            value: '004'
    led_enable:
      name: Enable LED
      description: Use the LED to show the state of the lights?
      default: true
      selector:
        boolean:
    led_invert:
      name: Invert LED
      description: Invert the LED state?
      default: false
      selector:
        boolean:
    subjects:
      name: Lights
      description: Which lights (or fans/switches) to control?
      selector:
        entity:
          domain: ['fan', 'light', 'switch']
          multiple: true

mode: single
max_exceeded: silent

triggers:
- trigger: state
  entity_id: !input subjects
  to: 'on'
  id: light_on
- trigger: state
  entity_id: !input subjects
  to: 'off'
  id: light_off
- trigger: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input controller
    command_class_name: Central Scene
    property_key: !input key
    value: KeyPressed
  id: key_pressed
- trigger: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input controller
    command_class_name: Central Scene
    property_key: !input key
    value: KeyPressed2x
  id: key_pressed_twice

variables:
  controller: !input controller
  key: !input key
  led_enable: !input led_enable
  led_invert: !input led_invert
  led_off_value: '{{ led_invert and 3 or 2 }}'
  led_on_value: '{{ led_invert and 2 or 3 }}'
  led_param: '{{ int(key) % 5 + 1 }}'
  subjects: !input subjects
  fans: '{{ subjects | select("search", "^fan\.") | list }}'
  lights: '{{ subjects | select("search", "^light\.") | list }}'
  switches: '{{ subjects | select("search", "^switch\.") | list }}'

actions:
- choose:
  - conditions:
    - '{{ trigger.id == "light_on" }}'
    - '{{ led_enable }}'
    sequence:
    - action: zwave_js.set_config_parameter
      data: { parameter: '{{ led_param }}', value: '{{ led_on_value }}' }
      target: { device_id: '{{ controller }}' }

  - conditions:
    - '{{ trigger.id == "light_off" }}'
    - '{{ led_enable }}'
    sequence:
    - action: zwave_js.set_config_parameter
      data: { parameter: '{{ led_param }}', value: '{{ led_off_value }}' }
      target: { device_id: '{{ controller }}' }

  - conditions:
    - '{{ trigger.id == "key_pressed" }}'
    - '{{ int(trigger.event.data.property_key) == int(key) }}'
    sequence:
    - if:
      - condition: state
        entity_id: !input subjects
        match: any
        state: 'off'
      then:
      - action: fan.turn_on
        target: { entity_id: '{{ fans }}' }
      - action: light.turn_on
        target: { entity_id: '{{ lights }}' }
      - action: switch.turn_on
        target: { entity_id: '{{ switches }}' }
      - if:
        - '{{ led_enable }}'
        then:
        - action: zwave_js.set_config_parameter
          data: { parameter: '{{ led_param }}', value: '{{ led_on_value }}' }
          target: { device_id: '{{ controller }}' }
      else:
      - action: fan.turn_off
        target: { entity_id: '{{ fans }}' }
      - action: light.turn_off
        target: { entity_id: '{{ lights }}' }
      - action: switch.turn_off
        target: { entity_id: '{{ switches }}' }
      - if:
        - '{{ led_enable }}'
        then:
        - action: zwave_js.set_config_parameter
          data: { parameter: '{{ led_param }}', value: '{{ led_off_value }}' }
          target: { device_id: '{{ controller }}' }

  - conditions:
    - '{{ trigger.id == "key_pressed_twice" }}'
    - '{{ int(trigger.event.data.property_key) == int(key) }}'
    sequence:
    - action: fan.turn_on
      data: { percentage: 100 }
      target: { entity_id: '{{ fans }}' }
    - action: light.turn_on
      data: { brightness_pct: 100 }
      target: { entity_id: '{{ lights }}' }
    - action: switch.turn_on
      target: { entity_id: '{{ switches }}' }
    - if:
      - '{{ led_enable }}'
      then:
      - action: zwave_js.set_config_parameter
        data: { parameter: '{{ led_param }}', value: '{{ led_on_value }}' }
        target: { device_id: '{{ controller }}' }
